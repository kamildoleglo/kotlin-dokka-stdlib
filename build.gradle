buildscript {
    repositories {
        mavenLocal()
        jcenter()
    }
    dependencies {
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:$dokka_version"
    }
}

plugins {
    id "de.undercouch.download" version "3.4.3"
    id 'com.github.jk1.tcdeps' version '0.17'
    id "java"
}
apply plugin: "org.jetbrains.dokka"

configurations {
    kotlin_sources
}

repositories {
    mavenLocal()
    mavenCentral()
    maven { url = "https://dl.bintray.com/kotlin/kotlin-eap" }
    maven { url = "https://dl.bintray.com/kotlin/kotlin-dev" }
    maven { url = "https://teamcity.jetbrains.com/guestAuth/repository/download/Kotlin_Dokka_DokkaAntMavenGradle/$dokka_build/maven" }
    jcenter()
}

task extractAll()

extractAll.dependsOn ':kotlin_big:extractLibs'
extractAll.dependsOn ':kotlin_big:extractSources'
extractAll.dependsOn ':kotlin_big:extractKotlinSources'
extractAll.dependsOn ':kotlin_native:extractKotlinNative'

def pKotlinBig() { return project(':kotlin_big').extensions }

def pKotlinNative() { return project(':kotlin_native').extensions }

task cleanupSources(type: Delete) {
    dependsOn extractAll
    doFirst {
        def base = file("${pKotlinNative().kotlin_native_root}/runtime/src/main/kotlin")
        delete(files("$base/kotlin/Functions.kt", "$base/kotlin/coroutines/SuspendFunctions.kt",
                "$base/kotlin/reflect/KFunctions.kt"))
    }
}

def outputDir = "$buildDir/dokka"


task callDokka() {
    delete(outputDir)
    dependsOn = [extractAll, cleanupSources]
}

gradle.projectsEvaluated {
    def kotlin_root = pKotlinBig().kotlin_root
    def kotlin_sources = pKotlinBig().kotlin_sources
    def kotlin_libs = pKotlinBig().kotlin_libs
    def kotlin_native_root = pKotlinNative().kotlin_native_root
    def kotlin_native_linux = pKotlinNative().kotlin_native_bin_linux
    def kotlin_native_windows = pKotlinNative().kotlin_native_bin_windows
    def kotlin_native_mac = pKotlinNative().kotlin_native_bin_mac
    def stdlibIncludeMd = "$kotlin_root/libraries/stdlib/src/Module.md"
    def stdlibSamples = "$kotlin_root/libraries/stdlib/samples/test"
    def kotlinTestIncludeMd = "$kotlin_root/libraries/kotlin.test/Module.md"

    def stdlibCommonClasspath = ["$kotlin_libs/kotlin-stdlib-common".toString()]
    def stdlibJvmClasspath = ["$kotlin_libs/kotlin-stdlib/".toString(), "$kotlin_sources/kotlin-stdlib-jdk7".toString(), "$kotlin_libs/kotlin-stdlib-jdk8/".toString(), "$kotlin_sources/kotlin-stdlib".toString(), "$kotlin_sources/kotlin-stdlib-common".toString(), "$kotlin_root/core/reflection.jvm/src".toString()]
    def stdlibNativeClasspath = ["$kotlin_native_linux/klib/common/stdlib".toString()]
    def stdlibJsClasspath = ["$kotlin_libs/kotlin-stdlib-js/".toString()]
    def kotlinTestCommonClasspath = ["$kotlin_libs/kotlin-test-common".toString()]
    def kotlinTestJunitClasspath = ["$kotlin_libs/kotlin-test-junit".toString()]
    def kotlinTestJunit5Classpath = ["$kotlin_libs/kotlin-test-junit5".toString()]
    def kotlinTestTestngClasspath = ["$kotlin_libs/kotlin-test-testng".toString()]
    def kotlinTestJsClasspath = ["$kotlin_libs/kotlin-test-js".toString()]
    def kotlinTestJvmClasspath = ["$kotlin_libs/kotlin-test".toString()]


    def stdlibPackageList = new URL("file://$outputDir/kotlin-stdlib/kotlin-stdlib/package-list".toString())
    def junit5PackageList = new URL("https://junit.org/junit5/docs/current/api/element-list".toString())
    def kotlinLanguageVersion = 1.4

    task dokkaStdlib(type: org.jetbrains.dokka.gradle.DokkaTask) {
        outputDirectory = outputDir + "/kotlin-stdlib"
        disableAutoconfiguration = true
        dokkaSourceSets {
            "kotlin-stdlib-common" {
                moduleDisplayName = "kotlin-stdlib"
                skipDeprecated = false
                jdkVersion = 8
                platform = "common"
                includes = [stdlibIncludeMd.toString()]
                noStdlibLink = true
                noJdkLink = true
                classpath = stdlibCommonClasspath
                languageVersion = kotlinLanguageVersion
                includeRootPackage = false
                samples = [stdlibSamples.toString()]
                displayName = "Common"
                sourceRoot {
                    path = "$kotlin_root/core/builtins/native"
                }
                sourceRoot {
                    path = "$kotlin_root/core/builtins/src"
                }
                sourceRoot {
                    path = "$kotlin_sources/kotlin-stdlib-common"
                }
            }

            "kotlin-stdlib-java" {
                moduleDisplayName = "kotlin-stdlib"
                skipDeprecated = false
                jdkVersion = 8
                platform = "jvm"
                includes = [stdlibIncludeMd.toString()]
                noStdlibLink = true
                classpath = stdlibJvmClasspath + stdlibCommonClasspath
                languageVersion = kotlinLanguageVersion
                includeRootPackage = false
                samples = [stdlibSamples.toString()]
                displayName = "JRE"
                dependsOn("kotlin-stdlib-common")
                sourceRoot {
                    path = "$kotlin_sources/kotlin-stdlib"
                }
                sourceRoot {
                    path = "$kotlin_sources/kotlin-stdlib-jdk7"
                }
                sourceRoot {
                    path = "$kotlin_sources/kotlin-stdlib-jdk8"
                }
                sourceRoot {
                    path = "$kotlin_root/core/reflection.jvm/src"
                }
                sourceRoot {
                    path = "$kotlin_root/libraries/stdlib/jvm/runtime/kotlin/jvm/annotations"
                }
                sourceRoot {
                    path = "$kotlin_root/libraries/stdlib/jvm/runtime/kotlin/jvm/JvmClassMapping.kt"
                }
                sourceRoot {
                    path = "$kotlin_root/libraries/stdlib/jvm/runtime/kotlin/jvm/PurelyImplements.kt"
                }
                sourceRoot {
                    path = "$kotlin_root/libraries/stdlib/jvm/runtime/kotlin/TypeAliases.kt"
                }
                sourceRoot {
                    path = "$kotlin_root/libraries/stdlib/jvm/runtime/kotlin/text/TypeAliases.kt"
                }
                perPackageOption {
                    prefix = "kotlin.reflect.jvm.internal"
                    suppress = true
                }
                perPackageOption {
                    prefix = "kotlin.jvm.functions"
                    suppress = true
                }
                perPackageOption {
                    prefix = "kotlin.jvm.internal"
                    suppress = true
                }
                perPackageOption {
                    prefix = "kotlin.coroutines.jvm.internal"
                    suppress = true
                }
                perPackageOption {
                    prefix = "kotlin.coroutines.experimental.migration"
                    suppress = true
                }
            }


            "kotlin-stdlib-js" {
                moduleDisplayName = "kotlin-stdlib"
                skipDeprecated = false
                jdkVersion = 8
                platform = "js"
                includes = [stdlibIncludeMd.toString()]
                noStdlibLink = true
                noJdkLink = true
                classpath = stdlibJsClasspath + stdlibCommonClasspath
                languageVersion = kotlinLanguageVersion
                includeRootPackage = false
                samples = [stdlibSamples.toString()]
                displayName = "JS"
                dependsOn("kotlin-stdlib-common")

                sourceRoot {
                    path = "$kotlin_sources/kotlin-stdlib-js"
                }
                perPackageOption {
                    prefix = "org.w3c"
                    reportUndocumented = false
                }
                perPackageOption {
                    prefix = "org.khronos"
                    reportUndocumented = false
                }
                perPackageOption {
                    prefix = "jquery"
                    suppress = true
                }
                perPackageOption {
                    prefix = "kotlin.reflect.jvm.internal"
                    suppress = true
                }
                perPackageOption {
                    prefix = "kotlin.js.internal"
                    suppress = true
                }
            }

            "kotlin-stdlib-native" {
                moduleDisplayName = "kotlin-stdlib"
                skipDeprecated = false
                jdkVersion = 8
                platform = "native"
                includes = [stdlibIncludeMd.toString()]
                noStdlibLink = true
                noJdkLink = true
                classpath = stdlibNativeClasspath + stdlibCommonClasspath
                languageVersion = kotlinLanguageVersion
                includeRootPackage = "false"
                samples = [stdlibSamples.toString()]
                displayName = "Native"
                dependsOn("kotlin-stdlib-common")

                sourceRoot {
                    path = "$kotlin_native_root/Interop/Runtime/src/main/kotlin"
                }
                sourceRoot {
                    path = "$kotlin_native_root/Interop/Runtime/src/native/kotlin"
                }
                sourceRoot {
                    path = "$kotlin_native_root/Interop/JsRuntime/src/main/kotlin"
                }
                sourceRoot {
                    path = "$kotlin_native_root/runtime/src/main/kotlin"
                }
                perPackageOption {
                    prefix = "kotlin.native.internal"
                    suppress = true
                }
                perPackageOption {
                    prefix = "kotlin.test"
                    suppress = true
                }
            }
        }
    }

    task dokkaKotlinTest(type: org.jetbrains.dokka.gradle.DokkaTask) {
        outputDirectory = outputDir + "/kotlin.test"
        disableAutoconfiguration = true
        dokkaSourceSets {
            "kotlin-test-common" {
                moduleDisplayName = "kotlin.test"
                skipDeprecated = false
                jdkVersion = 8
                platform = "common"
                includes = [kotlinTestIncludeMd.toString()]
                classpath = kotlinTestCommonClasspath
                languageVersion = kotlinLanguageVersion
                includeRootPackage = false
                displayName = "Common"
                sourceRoot {
                    path = "$kotlin_root/libraries/kotlin.test/common/src/main/kotlin"
                }
                sourceRoot {
                    path = "$kotlin_root/libraries/kotlin.test/annotations-common/src/main/kotlin"
                }
            }

            "kotlin-test-jvm" {
                moduleDisplayName = "kotlin.test"
                skipDeprecated = false
                jdkVersion = 8
                platform = "jvm"
                includes = [kotlinTestIncludeMd.toString()]
                classpath = kotlinTestJvmClasspath
                languageVersion = kotlinLanguageVersion
                includeRootPackage = false
                displayName = "JVM"
                sourceRoot {
                    path = "$kotlin_root/libraries/kotlin.test/jvm/src/main/kotlin"
                }
                perPackageOption {
                    prefix = "org.junit"
                    skipDeprecated = true
                }
            }

            "kotlin-test-JUnit" {
                moduleDisplayName = "kotlin.test"
                skipDeprecated = false
                jdkVersion = 8
                platform = "jvm"
                includes = [kotlinTestIncludeMd.toString()]
                classpath = kotlinTestJunitClasspath
                languageVersion = kotlinLanguageVersion
                includeRootPackage = false
                displayName = "JUnit"
                sourceRoot {
                    path = "$kotlin_root/libraries/kotlin.test/junit/src/main/kotlin"
                }
                externalDocumentationLink {
                    url = new URL("https://kotlinlang.org/api/latest/jvm/stdlib/")
                    packageListUrl = stdlibPackageList
                }
                externalDocumentationLink {
                    url = new URL("http://junit.org/junit4/javadoc/latest/")
                    packageListUrl = new URL("http://junit.org/junit4/javadoc/latest/package-list")
                }
            }

            "kotlin-test-JUnit5" {
                moduleDisplayName = "kotlin.test"
                skipDeprecated = false
                jdkVersion = 8
                platform = "jvm"
                includes = [kotlinTestIncludeMd.toString()]
                classpath = kotlinTestJunit5Classpath
                languageVersion = kotlinLanguageVersion
                includeRootPackage = false
                displayName = "JUnit5"
                sourceRoot {
                    path = "$kotlin_root/libraries/kotlin.test/junit5/src/main/kotlin"
                }
                externalDocumentationLink {
                    url = new URL("https://kotlinlang.org/api/latest/jvm/stdlib/")
                    packageListUrl = stdlibPackageList
                }
                externalDocumentationLink {
                    url = new URL("https://junit.org/junit5/docs/current/api/")
                    packageListUrl = junit5PackageList
                }
            }

            "kotlin-test-TestNG" {
                moduleDisplayName = "kotlin.test"
                skipDeprecated = false
                jdkVersion = 8
                platform = "jvm"
                includes = [kotlinTestIncludeMd.toString()]
                classpath = kotlinTestTestngClasspath
                languageVersion = kotlinLanguageVersion
                includeRootPackage = false
                displayName = "TestNG"
                sourceRoot {
                    path = "$kotlin_root/libraries/kotlin.test/testng/src/main/kotlin"
                }
                externalDocumentationLink {
                    url = new URL("https://kotlinlang.org/api/latest/jvm/stdlib/")
                    packageListUrl = stdlibPackageList
                }
                externalDocumentationLink {
                    url = new URL("https://jitpack.io/com/github/cbeust/testng/master/javadoc/")
                    packageListUrl = new URL("https://jitpack.io/com/github/cbeust/testng/master/javadoc/package-list")
                }
            }

            "kotlin-test-js" {
                moduleDisplayName = "kotlin.test"
                skipDeprecated = false
                jdkVersion = 8
                platform = "js"
                includes = [kotlinTestIncludeMd.toString()]
                classpath = kotlinTestJsClasspath
                languageVersion = kotlinLanguageVersion
                includeRootPackage = false
                displayName = "JS"
                sourceRoot {
                    path = "$kotlin_root/libraries/kotlin.test/js/src/main/kotlin"
                }
                perPackageOption {
                    prefix = "org.junit"
                    skipDeprecated = true
                }
                externalDocumentationLink {
                    url = new URL("https://kotlinlang.org/api/latest/jvm/stdlib/")
                    packageListUrl = stdlibPackageList
                }
            }

            "kotlin-test-native" {
                moduleDisplayName = "kotlin.test"
                skipDeprecated = false
                jdkVersion = 8
                platform = "native"
                includes = [kotlinTestIncludeMd.toString()]
                classpath = kotlinTestJsClasspath
                languageVersion = kotlinLanguageVersion
                includeRootPackage = false
                displayName = "Native"
                sourceRoot {
                    path = "$kotlin_native_root/runtime/src/main/kotlin/kotlin/test"
                }
                externalDocumentationLink {
                    url = new URL("https://kotlinlang.org/api/latest/jvm/stdlib/")
                    packageListUrl = stdlibPackageList
                }
            }
        }
    }


    callDokka.finalizedBy dokkaStdlib
//    dokkaStdlib.finalizedBy dokkaKotlinTest
}

tasks {
    doLast {
        println(" ##teamcity[publishArtifacts '${outputDir}/kotlin.test => kotlin.test.zip'] ")
    }
}
